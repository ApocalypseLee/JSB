import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'com.android.application'

android {
    aaptOptions.cruncherEnabled = false;
    compileSdkVersion PROP_COMPILE_SDK_VERSION.toInteger()
    buildToolsVersion PROP_BUILD_TOOLS_VERSION

    defaultConfig {
        applicationId "com.bjyt.game.vivo"
        minSdkVersion PROP_MIN_SDK_VERSION
        targetSdkVersion PROP_TARGET_SDK_VERSION
        versionCode 6
        versionName "1.0.5"
        multiDexEnabled true

        ndk {
            // 设置支持的 SO 库构架，注意这里要根据你的实际情况来设置 abiFilters ‘armeabi-v7a’, ‘arm64-v8a’, ‘x86’, ‘x86_64’
            abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
        }

        externalNativeBuild {
            ndkBuild {
                if (!project.hasProperty("PROP_NDK_MODE") || PROP_NDK_MODE.compareTo('none') != 0) {
                    // skip the NDK Build step if PROP_NDK_MODE is none
                    targets 'cocos2djs'
                    arguments 'NDK_TOOLCHAIN_VERSION=clang'

                    def module_paths = [project.file("../../../cocos2d-x"),
                                        project.file("../../../cocos2d-x/cocos"),
                                        project.file("../../../cocos2d-x/external")]
                    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                        arguments 'NDK_MODULE_PATH=' + module_paths.join(";")
                    }
                    else {
                        arguments 'NDK_MODULE_PATH=' + module_paths.join(':')
                    }
                    
                    arguments '-j' + Runtime.runtime.availableProcessors()
                    abiFilters.addAll(PROP_APP_ABI.split(':').collect{it as String})
                }
            }
        }
    }

    sourceSets.main {
        java.srcDirs "../src", "src"
        res.srcDirs "../res", 'res'
        jniLibs.srcDirs "../libs", 'libs'
        manifest.srcFile "AndroidManifest.xml"
        assets {
            srcDirs 'assets', 'src\\assets'
        }
    }

    externalNativeBuild {
        ndkBuild {
            if (!project.hasProperty("PROP_NDK_MODE") || PROP_NDK_MODE.compareTo('none') != 0) {
                // skip the NDK Build step if PROP_NDK_MODE is none
                path "jni/Android.mk"
            }
        }
    }

    signingConfigs {

       release {
            if (project.hasProperty("RELEASE_STORE_FILE")) {
                storeFile file(RELEASE_STORE_FILE)
                storePassword RELEASE_STORE_PASSWORD
                keyAlias RELEASE_KEY_ALIAS
                keyPassword RELEASE_KEY_PASSWORD
            }
        }
    }

    buildTypes {
        release {
            debuggable false
            jniDebuggable false
            renderscriptDebuggable false
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (project.hasProperty("RELEASE_STORE_FILE")) {
                signingConfig signingConfigs.release
            }

            externalNativeBuild {
                ndkBuild {
                    arguments 'NDK_DEBUG=0'
                }
            }
        }

        debug {
            debuggable true
            jniDebuggable true
            renderscriptDebuggable true
            signingConfig signingConfigs.release
            externalNativeBuild {
                ndkBuild {
                    arguments 'NDK_DEBUG=1'
                }
            }
        }
    }

    packagingOptions{ doNotStrip "*/armeabi/libvsecbox.so" }
    packagingOptions{ doNotStrip "*/armeabi-v7a/libvsecbox.so" }
    packagingOptions{ doNotStrip "*/arm64-v8a/libvsecbox.so" }
}

android.applicationVariants.all { variant ->
    // delete previous files first
    delete "${buildDir}/intermediates/merged_assets/${variant.dirName}"

    variant.mergeAssetsProvider.get().doLast {
        def sourceDir = "${buildDir}/../../../../.."

        copy {
            from "${sourceDir}/assets"
            into "${outputDir}/assets"
        }

        copy {
            from "${sourceDir}/src"
            into "${outputDir}/src"
        }

        copy {
            from "${sourceDir}/jsb-adapter"
            into "${outputDir}/jsb-adapter"
        }

        copy {
            from "${sourceDir}/main.js"
            from "${sourceDir}/project.json"
            into outputDir
        }
    }
}

dependencies {
    implementation fileTree(dir: '../libs', include: ['*.jar','*.aar'])
    implementation fileTree(dir: 'libs', include: ['*.jar','*.aar'])
    implementation fileTree(dir: "../../../cocos2d-x/cocos/platform/android/java/libs", include: ['*.jar'])
    implementation project(':libcocos2dx')

    implementation 'com.squareup.leakcanary:leakcanary-android:1.5.4'
    //微信
    implementation 'com.tencent.mm.opensdk:wechat-sdk-android-without-mta:6.6.5.2'
    api 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'junit:junit:4.12'
    implementation 'com.blankj:utilcode:1.22.7'
    api 'com.google.guava:guava:27.0.1-android'
    implementation 'com.android.support:multidex:1.0.3'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'

    // 友盟基础组件库（所有友盟业务SDK都依赖基础组件库）
    // OAID目前为目前国内市场主流的Android Q设备标识，可根据需要选择。
    implementation "com.umeng.umsdk:common:9.3.3" //（必选）
    implementation "com.umeng.umsdk:asms:1.1.4" // asms包依赖(必选)
    implementation 'com.umeng.umsdk:apm:1.1.0' // U-APM产品包依赖(必选)
//    implementation "com.umeng.umsdk:oaid_lenovo:1.0.0" // (可选)
//    implementation "com.umeng.umsdk:oaid_mi:1.0.0" // (可选)
//    implementation "com.umeng.umsdk:oaid_oppo:1.0.4" // (可选)
//    implementation "com.umeng.umsdk:oaid_vivo:1.0.0.1" // (可选)

    // 下面各SDK根据宿主App是否使用相关业务按需引入。
    // 友盟统计SDK
    implementation "com.umeng.umsdk:game:9.2.0+G" // 游戏统计SDK依赖(可选)
}
